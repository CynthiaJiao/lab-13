replace = TRUE,
size = 100, prob = c(1,1,1))
# if you want to randomly shuffle
roleE <- sample(roleB, size = 100, replace = FALSE)
View(df_colonists)
df <- data.frame(row = rep(1:100, 5),
role = c(roleA, roleB, roleC, roleD, roleE),
method = c(rep("Method A", length(roleA)),
rep("Method B", length(roleB)),
rep("Method C", length(roleC)),
rep("Method D", length(roleD)),
rep("Method E", length(roleE))))
df %>%
DT::datatable(
rownames = FALSE,
class = "cell-border stripe",
filter = list(position = "top"),
options = list(
pageLength = nrow(df)/5,
autoWidth = TRUE,
bInfo = FALSE,
paging = FALSE
)
)
View(df)
View(df)
# Let's say these are your 5 role labels
roles <- c("Scientist", "Farmer", "Medic", "Engineer", "Cook")
# Randomly assign one role to each colonist
set.seed(123)  # for reproducibility
df_colonists$role <- sample(roles, size = nrow(df_colonists), replace = TRUE)
View(df_colonists)
View(df_colonists)
install.packages("DT")
library(DT)
df <- data.frame(row = rep(1:100, 5),
role = c(roleA, roleB, roleC, roleD, roleE),
method = c(rep("Method A", length(roleA)),
rep("Method B", length(roleB)),
rep("Method C", length(roleC)),
rep("Method D", length(roleD)),
rep("Method E", length(roleE))))
df %>%
DT::datatable(
rownames = FALSE,
class = "cell-border stripe",
filter = list(position = "top"),
options = list(
pageLength = nrow(df)/5,
autoWidth = TRUE,
bInfo = FALSE,
paging = FALSE
)
)
View(df)
View(df)
set.seed(42)
# Create roles (20 of each for 100 people)
roles <- rep(c("Engineer", "Worker", "Medic", "Scientist"), each = 25)
# Randomly shuffle
df_colonists$role <- sample(roles)
View(df_colonists)
View(df_colonists)
set.seed(123)
marsgar <- runif(0, 100)
set.seed(123)
df_colonists$marsgar <- runif(100, min = 0, max = 100)
View(df_colonists)
View(df_colonists)
# Simulate technical skills based on age
# Set the seed for reproducibility
set.seed(123)
# Create a variable for technical skills
df_colonists$technical_skills <- 2 * df_colonists$age + rnorm(100, mean = 0, sd = 1)
# Simulate technical skills based on age
# Set the seed for reproducibility
set.seed(123)
# Create a variable for technical skills
df_colonists$technical_skills <- 2 * df_colonists$age + rnorm(100, mean = 0, sd = 1)
View(df_colonists)
View(df_colonists)
# Simulate technical skills based on age
# Set the seed for reproducibility
set.seed(123)
# Create a variable for technical skills
df_colonists$technical_skills <- 2 * df_colonists$age + rnorm(100, mean = 0, sd = 1)
# visualize the relationship
plot(df_colonists$age, df_colonists$technical_skills,
main = "Scatter Plot of Age vs. Skills",
xlab = "Age",
ylab = "Skills",
pch = 19,       # solid circle points
col = "darkorange")
plot(df_colonists$age, df_colonists$technical_skills,
main = "Scatter Plot of Age vs. Skills",
xlab = "Age",
ylab = "Skills",
pch = 19)
plot(df_colonists$age, df_colonists$technical_skills,
main = "Scatter Plot of Age vs. Skills",
xlab = "Age",
ylab = "Skills")
ggplot(df_colonists, aes(x = age, y = technical_skills)) +
geom_point(color = "black", size = 1.5) +
geom_smooth(method = "lm", color = "purple", se = FALSE) +
stat_poly_eq(
formula = y ~ x,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE,
label.x.npc = "right",
label.y.npc = 1,
color = "purple"
) +
labs(title = "Scatter Plot of Colonist Age and technical skills",
x = "Age",
y = "technical_skills") +
theme_minimal()
library(DT)
library(tidyverse)
library(MASS)
library(ggplot2)
# Simulate technical skills based on age
# Set the seed for reproducibility
set.seed(123)
# Create a variable for technical skills
df_colonists$technical_skills <- 2 * df_colonists$age + rnorm(100, mean = 0, sd = 1)
# visualize the relationship
ggplot(df_colonists, aes(x = age, y = technical_skills)) +
geom_point(color = "black", size = 1.5) +
geom_smooth(method = "lm", color = "purple", se = FALSE) +
stat_poly_eq(
formula = y ~ x,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE,
label.x.npc = "right",
label.y.npc = 1,
color = "purple"
) +
labs(title = "Scatter Plot of Colonist Age and technical skills",
x = "Age",
y = "technical_skills") +
theme_minimal()
# Simulate technical skills based on age
# Set the seed for reproducibility
set.seed(123)
# Create a variable for technical skills
df_colonists$technical_skills <- 2 * df_colonists$age + rnorm(100, mean = 0, sd = 1)
# visualize the relationship
ggplot(df_colonists, aes(x = age, y = technical_skills)) +
geom_point(color = "black", size = 1.5) +
geom_smooth(method = "lm", color = "purple", se = FALSE) +
labs(title = "Scatter Plot of Colonist Age and technical skills",
x = "Age",
y = "Skills") +
theme_minimal()
ggplot(df_colonists, aes(x = age, y = technical_skills)) +
geom_point(color = "purple", size = 1.5) +
geom_smooth(method = "lm", color = "black", se = FALSE) +
labs(title = "Scatter Plot of Colonist Age and technical skills",
x = "Age",
y = "Skills") +
theme_minimal()
ggplot(df_colonists, aes(x = age, y = technical_skills)) +
geom_point(color = "purple", size = 1.5) +
geom_smooth(method = "lm", color = "black", se = TRUE) +
labs(title = "Scatter Plot of Colonist Age and technical skills",
x = "Age",
y = "Skills") +
theme_minimal()
ggplot(df_colonists, aes(x = age, y = technical_skills)) +
geom_point(color = "purple", size = 1.5) +
geom_smooth(method = "lm", color = "black") +
labs(title = "Scatter Plot of Colonist Age and technical skills",
x = "Age",
y = "Skills") +
theme_minimal()
ggplot(df_colonists, aes(x = age, y = technical_skills)) +
geom_jitter(color = "purple", size = 1.5) +
geom_smooth(method = "lm", color = "black") +
labs(title = "Scatter Plot of Colonist Age and technical skills",
x = "Age",
y = "Skills") +
theme_minimal()
df_colonists$problem_solving[df_colonists$role == "engineer"] <- rnorm(sum(df_colonists$role == "engineer"), mean = 100, sd = 10)
df_colonists$problem_solving[df_colonists$role == "scientist"] <- rnorm(sum(df_colonists$role == "scientist"), mean = 80, sd = 10)
df_colonists$problem_solving[df_colonists$role == "medic"] <- rnorm(sum(df_colonists$role == "medic"), mean = 60, sd = 10)
View(df_colonists)
View(df_colonists)
df_colonists$problem_solving[df_colonists$role == "engineer"]  <- rnorm(sum(df_colonists$role == "engineer"),  mean = 100, sd = 10)
df_colonists$problem_solving[df_colonists$role == "scientist"] <- rnorm(sum(df_colonists$role == "scientist"), mean = 80,  sd = 10)
df_colonists$problem_solving[df_colonists$role == "medic"]     <- rnorm(sum(df_colonists$role == "medic"),     mean = 60,  sd = 10)
df_colonists$problem_solving[df_colonists$role == "worker"]    <- rnorm(sum(df_colonists$role == "worker"),    mean = 50,  sd = 10)
df_colonists$problem_solving <- df_colonists$problem_solving
View(df_colonists)
View(df_colonists)
df_colonists$problem_solving <- NA
df_colonists$problem_solving[df_colonists$role == "engineer"]  <- rnorm(sum(df_colonists$role == "engineer"),  mean = 100, sd = 10)
df_colonists$problem_solving[df_colonists$role == "scientist"] <- rnorm(sum(df_colonists$role == "scientist"), mean = 80,  sd = 10)
df_colonists$problem_solving[df_colonists$role == "medic"]     <- rnorm(sum(df_colonists$role == "medic"),     mean = 60,  sd = 10)
df_colonists$problem_solving[df_colonists$role == "worker"]    <- rnorm(sum(df_colonists$role == "worker"),    mean = 50,  sd = 10)
View(df_colonists)
View(df_colonists)
df_colonists$problem_solving <- NA
set.seed(123)
df_colonists$problem_solving[df_colonists$role == "engineer"]  <- rnorm(sum(df_colonists$role == "engineer"),  mean = 100, sd = 10)
df_colonists$problem_solving[df_colonists$role == "scientist"] <- rnorm(sum(df_colonists$role == "scientist"), mean = 80,  sd = 10)
df_colonists$problem_solving[df_colonists$role == "medic"]     <- rnorm(sum(df_colonists$role == "medic"),     mean = 60,  sd = 10)
df_colonists$problem_solving[df_colonists$role == "worker"]    <- rnorm(sum(df_colonists$role == "worker"),    mean = 50,  sd = 10)
View(df_colonists)
set.seed(123)
df_colonists$problem_solving[df_colonists$role == "engineer"]  <- rnorm(sum(df_colonists$role == "engineer"),  mean = 100, sd = 10)
df_colonists$problem_solving[df_colonists$role == "scientist"] <- rnorm(sum(df_colonists$role == "scientist"), mean = 80,  sd = 10)
df_colonists$problem_solving[df_colonists$role == "medic"]     <- rnorm(sum(df_colonists$role == "medic"),     mean = 60,  sd = 10)
df_colonists$problem_solving[df_colonists$role == "worker"]    <- rnorm(sum(df_colonists$role == "worker"),    mean = 50,  sd = 10)
View(df_colonists)
View(df_colonists)
set.seed(123)
df_colonists$problem_solving[df_colonists$role == "Engineer"]  <- rnorm(sum(df_colonists$role == "Engineer"),  mean = 100, sd = 10)
df_colonists$problem_solving[df_colonists$role == "Scientist"] <- rnorm(sum(df_colonists$role == "Scientist"), mean = 80,  sd = 10)
df_colonists$problem_solving[df_colonists$role == "Medic"]     <- rnorm(sum(df_colonists$role == "Medic"),     mean = 60,  sd = 10)
df_colonists$problem_solving[df_colonists$role == "Worker"]    <- rnorm(sum(df_colonists$role == "Worker"),    mean = 50,  sd = 10)
View(df_colonists)
?mvrnorm
?mvrnorm
mean_traits <- c(50, 50)
cov_matrix <- matrix(c(100, 50,
50, 100), ncol = 2)
# Generate correlated data
traits_data <- mvrnorm(n = 100, mu = mean_traits, Sigma = cov_matrix, empirical = FALSE)
colnames(traits_data) <- c("resilience", "agreeableness")
df_colonists <- cbind(df_colonists, traits_data)
View(df_colonists)
View(df_colonists)
cor_matrix_bigfive <- matrix(c(
1.0000, 0.2599, 0.1972, 0.1860, 0.2949,
0.2599, 1.0000, 0.1576, 0.2306, 0.0720,
0.1972, 0.1576, 1.0000, 0.2866, 0.1951,
0.1860, 0.2306, 0.2866, 1.0000, 0.1574,
0.2949, 0.0720, 0.1951, 0.1574, 1.0000
), nrow=5, ncol=5, byrow=TRUE,
dimnames=list(c("EX", "ES", "AG", "CO", "OP"),
c("EX", "ES", "AG", "CO", "OP")))
# Generate correlated data
big_five_data <- mvrnorm(n = 100, mu = mean_traits, Sigma = cov_matrix, empirical = FALSE)
colnames(big_five_data) <- c("openness", "agreeableness", "conscientiousness", "extraversion", "neuroticism")
cor_matrix_bigfive <- matrix(c(
1.0000, 0.2599, 0.1972, 0.1860, 0.2949,
0.2599, 1.0000, 0.1576, 0.2306, 0.0720,
0.1972, 0.1576, 1.0000, 0.2866, 0.1951,
0.1860, 0.2306, 0.2866, 1.0000, 0.1574,
0.2949, 0.0720, 0.1951, 0.1574, 1.0000
), nrow=5, ncol=5, byrow=TRUE,
dimnames=list(c("EX", "ES", "AG", "CO", "OP"),
c("EX", "ES", "AG", "CO", "OP")))
# Generate correlated data
big_five_data <- mvrnorm(n = 100, mu = mean_traits, Sigma = cor_matrix_bigfive, empirical = FALSE)
cor_matrix_bigfive <- matrix(c(
1.0000, 0.2599, 0.1972, 0.1860, 0.2949,
0.2599, 1.0000, 0.1576, 0.2306, 0.0720,
0.1972, 0.1576, 1.0000, 0.2866, 0.1951,
0.1860, 0.2306, 0.2866, 1.0000, 0.1574,
0.2949, 0.0720, 0.1951, 0.1574, 1.0000
), nrow=5, ncol=5, byrow=TRUE,
dimnames=list(c("EX", "ES", "AG", "CO", "OP"),
c("EX", "ES", "AG", "CO", "OP")))
# Generate correlated data
mu_bigfive <- rep(0, 5)
big_five_data <- mvrnorm(n = 100, mu = mu_bigfive, Sigma = cor_matrix_bigfive, empirical = FALSE)
colnames(big_five_data) <- c("openness", "agreeableness", "conscientiousness", "extraversion", "neuroticism") ## this agreeableness here will overwrite the agreeableness before
df_colonists <- cbind(df_colonists, big_five_data)
View(df_colonists)
View(df_colonists)
set.seed(12)
# simulate 100 planets
colonies_list <- replicate(
n = 100,
expr = {
scores <- mvrnorm(n = 100, mu = mu_bigfive, Sigma = cor_matrix_bigfive)
df <- as.data.frame(scores)
colnames(df) <- c("Extraversion", "Emotional_Stability",
"Agreeableness", "Conscientiousness", "Openness")
return(df)
},
simplify = FALSE
)
View(colonies_list)
View(colonies_list)
View(colonies_list)
View(colonies_list)
set.seed(12)
# simulate 100 planets
colonies_list <- replicate(
n = 100,
expr = {
scores <- mvrnorm(n = 100, mu = mu_bigfive, Sigma = cor_matrix_bigfive)
df <- as.data.frame(scores)
colnames(df) <- c("Extraversion", "Emotional_Stability",
"Agreeableness", "Conscientiousness", "Openness")
return(df)
},
simplify = FALSE
)
df_all <- bind_rows(
lapply(1:100, function(i) {
colonies_list[[i]] %>%
mutate(planet = i, colonist_id = 1:100)
})
)
View(df_all)
View(df_all)
set.seed(12)
# simulate 100 planets
colonies_list <- replicate(
n = 100,
expr = {
scores <- mvrnorm(n = 100, mu = mu_bigfive, Sigma = cor_matrix_bigfive)
df <- as.data.frame(scores)
colnames(df) <- c("Extraversion", "Neurotism",
"Agreeableness", "Conscientiousness", "Openness")
return(df)
},
simplify = FALSE
)
df_all <- bind_rows(
lapply(1:100, function(i) {
colonies_list[[i]] %>%
mutate(planet = i, colonist_id = 1:100)
})
)
set.seed(12)
# simulate 100 planets
colonies_list <- replicate(
n = 100,
expr = {
scores <- mvrnorm(n = 100, mu = mu_bigfive, Sigma = cor_matrix_bigfive)
df <- as.data.frame(scores)
colnames(df) <- c("Extraversion", "Neurotism",
"Agreeableness", "Conscientiousness", "Openness")
return(df)
},
simplify = FALSE
)
df_all <- bind_rows(
lapply(1:100, function(i) {
colonies_list[[i]] %>%
mutate(planet = i, colonist_id = 1:100)
})
)
summary_df <- df_all %>%
group_by(planet) %>%
summarise(
mean_extraversion = mean(Extraversion),
sd_extraversion = sd(Extraversion),
correlation_with_openness = cor(Extraversion, Openness)
)
set.seed(12)
# simulate 100 planets
colonies_list <- replicate(
n = 100,
expr = {
scores <- mvrnorm(n = 100, mu = mu_bigfive, Sigma = cor_matrix_bigfive)
df <- as.data.frame(scores)
colnames(df) <- c("Extraversion", "Neurotism",
"Agreeableness", "Conscientiousness", "Openness")
return(df)
},
simplify = FALSE
)
df_all <- bind_rows(
lapply(1:100, function(i) {
colonies_list[[i]] %>%
mutate(planet = i, colonist_id = 1:100)
})
)
summary_df <- df_all %>%
group_by(planet) %>%
summarise(
mean_extraversion = mean(Extraversion),
sd_extraversion = sd(Extraversion),
correlation_with_openness = cor(Extraversion, Openness)
)
print(summary_df)
ggplot(summary_df, aes(x = correlation_with_openness)) +
geom_histogram(binwidth = 0.02, fill = "skyblue", color = "white") +
labs(
title = "Distribution of Correlations Between Extraversion and Openness",
x = "Correlation Coefficient (r)",
y = "Number of Colonies"
) +
theme_minimal()
# Simulate technical skills based on age
# Set the seed for reproducibility
set.seed(1235)
# Create a variable for technical skills
df_colonists$technical_skills <- 2 * df_colonists$age + rnorm(100, mean = 0, sd = 1)
# visualize the relationship
ggplot(df_colonists, aes(x = age, y = technical_skills)) +
geom_jitter(color = "purple", size = 1.5) +
geom_smooth(method = "lm", color = "black") +
labs(title = "Scatter Plot of Colonist Age and technical skills",
x = "Age",
y = "Skills") +
theme_minimal()
set.seed(1235)
# Create a variable for technical skills
df_colonists$technical_skills <- 2 * df_colonists$age + rnorm(100, mean = 0, sd = 1)
ggplot(df_colonists, aes(x = age, y = technical_skills)) +
geom_jitter(color = "purple", size = 1.5) +
geom_smooth(method = "lm", color = "black") +
labs(title = "Scatter Plot of Colonist Age and technical skills",
x = "Age",
y = "Skills") +
theme_minimal()
# Simulate technical skills based on age
# Set the seed for reproducibility
set.seed(123)
# Create a variable for technical skills
df_colonists$technical_skills <- 2 * df_colonists$age + rnorm(100, mean = 0, sd = 1)
# visualize the relationship
ggplot(df_colonists, aes(x = age, y = technical_skills)) +
geom_jitter(color = "purple", size = 1.5) +
geom_smooth(method = "lm", color = "black") +
labs(title = "Scatter Plot of Colonist Age and technical skills",
x = "Age",
y = "Skills") +
theme_minimal()
View(df_colonists)
View(df_colonists)
set.seed(1)
roleA <- rep(c("engineer", "scientist", "medic"),
length.out = 100)
# this works if we want to set a specific number of each role
roleB <- rep(c("engineer", "scientist", "medic"),
each = 34,
length.out = 100)
roleC <- rep(c("engineer", "scientist", "medic"),
times = c(33, 33, 33),
length.out = 100)
# if you want to use sampling weights
roleD <- sample(c("engineer", "scientist", "medic"),
replace = TRUE,
size = 100, prob = c(1,1,1))
# if you want to randomly shuffle
roleE <- sample(roleB, size = 100, replace = FALSE)
## Hey Mason, I am not understanding how the codes above work, so I just did things below, which seems to achieve the same goal we intended?
## in addition to engineer, scientist, and medic, a colony probably needs workers to get the work done, so adding workers to the role variable...
set.seed(42)
# create roles (25 of each for 100 people)
roles <- rep(c("Engineer", "Worker", "Medic", "Scientist"), each = 25)
# randomly shuffle
df_colonists$role <- sample(roles)
library(DT)
library(tidyverse)
library(MASS)
library(ggplot2)
set.seed(123)
age <- rnorm(100, mean = 30, sd = 5)
df_colonists <- data.frame(id = 1:100, # this is our id column
age = age ) # add the age column here
ggplot(df_colonists, aes(x = age)) +
geom_histogram(binwidth = 5, fill = "skyblue", color = "white") +
labs(title = "Age Distribution of Colonists",
x = "Age",
y = "Count") +
theme_minimal()
set.seed(1)
roleA <- rep(c("engineer", "scientist", "medic"),
length.out = 100)
# this works if we want to set a specific number of each role
roleB <- rep(c("engineer", "scientist", "medic"),
each = 34,
length.out = 100)
roleC <- rep(c("engineer", "scientist", "medic"),
times = c(33, 33, 33),
length.out = 100)
# if you want to use sampling weights
roleD <- sample(c("engineer", "scientist", "medic"),
replace = TRUE,
size = 100, prob = c(1,1,1))
# if you want to randomly shuffle
roleE <- sample(roleB, size = 100, replace = FALSE)
## Hey Mason, I am not understanding how the codes above work, so I just did things below, which seems to achieve the same goal we intended?
## in addition to engineer, scientist, and medic, a colony probably needs workers to get the work done, so adding workers to the role variable...
set.seed(42)
# create roles (25 of each for 100 people)
roles <- rep(c("Engineer", "Worker", "Medic", "Scientist"), each = 25)
# randomly shuffle
df_colonists$role <- sample(roles)
## create the MARSGAR variable
set.seed(123)
df_colonists$marsgar <- runif(100, min = 0, max = 100)
View(df_colonists)
View(df_colonists)
# Simulate technical skills based on age
# Set the seed for reproducibility
set.seed(123)
# Create a variable for technical skills
df_colonists$technical_skills <- 2 * df_colonists$age + rnorm(100, mean = 0, sd = 1)
# visualize the relationship
ggplot(df_colonists, aes(x = age, y = technical_skills)) +
geom_jitter(color = "purple", size = 1.5) +
geom_smooth(method = "lm", color = "black") +
labs(title = "Scatter Plot of Colonist Age and technical skills",
x = "Age",
y = "Skills") +
theme_minimal()
##since I have 4 levels in role...
set.seed(123)
df_colonists$problem_solving[df_colonists$role == "Engineer"]  <- rnorm(sum(df_colonists$role == "Engineer"),  mean = 100, sd = 10)
df_colonists$problem_solving[df_colonists$role == "Scientist"] <- rnorm(sum(df_colonists$role == "Scientist"), mean = 80,  sd = 10)
df_colonists$problem_solving[df_colonists$role == "Medic"]     <- rnorm(sum(df_colonists$role == "Medic"),     mean = 70,  sd = 10)
df_colonists$problem_solving[df_colonists$role == "Worker"]    <- rnorm(sum(df_colonists$role == "Worker"),    mean = 60,  sd = 10)
